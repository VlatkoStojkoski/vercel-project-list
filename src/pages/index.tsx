import type { InferGetServerSidePropsType, NextPage } from 'next';
import Head from 'next/head';
import { trpc } from '../utils/trpc';
import { getTrpcUrl } from './_app';
import { useEffect } from 'react';
import Link from 'next/link';
import { env } from '../env/client.mjs';

type TechnologyCardProps = {
	name: string;
	description: string;
	documentation: string;
};

const Home: NextPage<InferGetServerSidePropsType<typeof getServerSideProps>> = ({ data: projects }) => {
	return (
		<>
			<Head>
				<title>Create T3 App</title>
				<meta name="description" content="Generated by create-t3-app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>

			{projects ?
				<code className="container mx-auto flex flex-col items-center justify-center min-h-screen p-4">
					{projects.map((project: any) =>
						<div key={project.id} className='text-center my-3'>
							<h2 className='text-xl italic'>{project.name}</h2>
							<p className='text-sm'>
								{new Date(project.createdAt).toDateString()}
							</p>
							{
								(() => {
									const domain =
										project.domains.find((domain: any) => domain.apexName === env.NEXT_PUBLIC_VERCEL_APEX)?.name ||
										project.domains[0].name;

									return <Link href={`https://${domain}`} >
										<a className='text-blue-500 hover:text-blue-600 hover:underline' target='_blank'>{domain}</a>
									</Link>;
								})()
							}
						</div>
					)}
				</code> :
				<h1>Loading...</h1>
			}
		</>
	);
};

export const getServerSideProps = async () => {
	const qs = trpc.createClient({
		url: getTrpcUrl(),
	});

	return {
		props: {
			data: (await qs.query('vercel.getAllDeployments') as any).json,
		},
	};
};

export default Home;
